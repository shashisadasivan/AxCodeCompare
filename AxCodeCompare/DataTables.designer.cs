#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AxCodeCompare
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AX_2012_model")]
	public partial class DataTablesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertElementType(ElementType instance);
    partial void UpdateElementType(ElementType instance);
    partial void DeleteElementType(ElementType instance);
    partial void InsertModelElement(ModelElement instance);
    partial void UpdateModelElement(ModelElement instance);
    partial void DeleteModelElement(ModelElement instance);
    partial void InsertModelElementData(ModelElementData instance);
    partial void UpdateModelElementData(ModelElementData instance);
    partial void DeleteModelElementData(ModelElementData instance);
    #endregion
		
		public DataTablesDataContext() : 
				base(global::AxCodeCompare.Properties.Settings.Default.AX_2012_modelConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataTablesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataTablesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataTablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataTablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ElementType> ElementTypes
		{
			get
			{
				return this.GetTable<ElementType>();
			}
		}
		
		public System.Data.Linq.Table<ModelElement> ModelElements
		{
			get
			{
				return this.GetTable<ModelElement>();
			}
		}
		
		public System.Data.Linq.Table<ModelElementData> ModelElementDatas
		{
			get
			{
				return this.GetTable<ModelElementData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ElementTypes")]
	public partial class ElementType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ElementType1;
		
		private System.Nullable<int> _ParentType;
		
		private string _ElementTypeName;
		
		private string _TreeNodeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnElementType1Changing(int value);
    partial void OnElementType1Changed();
    partial void OnParentTypeChanging(System.Nullable<int> value);
    partial void OnParentTypeChanged();
    partial void OnElementTypeNameChanging(string value);
    partial void OnElementTypeNameChanged();
    partial void OnTreeNodeNameChanging(string value);
    partial void OnTreeNodeNameChanged();
    #endregion
		
		public ElementType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ElementType", Storage="_ElementType1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ElementType1
		{
			get
			{
				return this._ElementType1;
			}
			set
			{
				if ((this._ElementType1 != value))
				{
					this.OnElementType1Changing(value);
					this.SendPropertyChanging();
					this._ElementType1 = value;
					this.SendPropertyChanged("ElementType1");
					this.OnElementType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentType", DbType="Int")]
		public System.Nullable<int> ParentType
		{
			get
			{
				return this._ParentType;
			}
			set
			{
				if ((this._ParentType != value))
				{
					this.OnParentTypeChanging(value);
					this.SendPropertyChanging();
					this._ParentType = value;
					this.SendPropertyChanged("ParentType");
					this.OnParentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementTypeName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string ElementTypeName
		{
			get
			{
				return this._ElementTypeName;
			}
			set
			{
				if ((this._ElementTypeName != value))
				{
					this.OnElementTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ElementTypeName = value;
					this.SendPropertyChanged("ElementTypeName");
					this.OnElementTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreeNodeName", DbType="VarChar(255)")]
		public string TreeNodeName
		{
			get
			{
				return this._TreeNodeName;
			}
			set
			{
				if ((this._TreeNodeName != value))
				{
					this.OnTreeNodeNameChanging(value);
					this.SendPropertyChanging();
					this._TreeNodeName = value;
					this.SendPropertyChanged("TreeNodeName");
					this.OnTreeNodeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelElement")]
	public partial class ModelElement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ElementType;
		
		private int _RootHandle;
		
		private int _ParentHandle;
		
		private int _ElementHandle;
		
		private string _Name;
		
		private int _AxId;
		
		private System.Nullable<int> _ParentId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnElementTypeChanging(int value);
    partial void OnElementTypeChanged();
    partial void OnRootHandleChanging(int value);
    partial void OnRootHandleChanged();
    partial void OnParentHandleChanging(int value);
    partial void OnParentHandleChanged();
    partial void OnElementHandleChanging(int value);
    partial void OnElementHandleChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAxIdChanging(int value);
    partial void OnAxIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    #endregion
		
		public ModelElement()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementType", DbType="Int NOT NULL")]
		public int ElementType
		{
			get
			{
				return this._ElementType;
			}
			set
			{
				if ((this._ElementType != value))
				{
					this.OnElementTypeChanging(value);
					this.SendPropertyChanging();
					this._ElementType = value;
					this.SendPropertyChanged("ElementType");
					this.OnElementTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootHandle", DbType="Int NOT NULL")]
		public int RootHandle
		{
			get
			{
				return this._RootHandle;
			}
			set
			{
				if ((this._RootHandle != value))
				{
					this.OnRootHandleChanging(value);
					this.SendPropertyChanging();
					this._RootHandle = value;
					this.SendPropertyChanged("RootHandle");
					this.OnRootHandleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentHandle", DbType="Int NOT NULL")]
		public int ParentHandle
		{
			get
			{
				return this._ParentHandle;
			}
			set
			{
				if ((this._ParentHandle != value))
				{
					this.OnParentHandleChanging(value);
					this.SendPropertyChanging();
					this._ParentHandle = value;
					this.SendPropertyChanged("ParentHandle");
					this.OnParentHandleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementHandle", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ElementHandle
		{
			get
			{
				return this._ElementHandle;
			}
			set
			{
				if ((this._ElementHandle != value))
				{
					this.OnElementHandleChanging(value);
					this.SendPropertyChanging();
					this._ElementHandle = value;
					this.SendPropertyChanged("ElementHandle");
					this.OnElementHandleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AxId", DbType="Int NOT NULL")]
		public int AxId
		{
			get
			{
				return this._AxId;
			}
			set
			{
				if ((this._AxId != value))
				{
					this.OnAxIdChanging(value);
					this.SendPropertyChanging();
					this._AxId = value;
					this.SendPropertyChanged("AxId");
					this.OnAxIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelElementData")]
	public partial class ModelElementData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LayerId;
		
		private int _ParentHandle;
		
		private int _ElementHandle;
		
		private int _ModelId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLayerIdChanging(int value);
    partial void OnLayerIdChanged();
    partial void OnParentHandleChanging(int value);
    partial void OnParentHandleChanged();
    partial void OnElementHandleChanging(int value);
    partial void OnElementHandleChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    #endregion
		
		public ModelElementData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LayerId
		{
			get
			{
				return this._LayerId;
			}
			set
			{
				if ((this._LayerId != value))
				{
					this.OnLayerIdChanging(value);
					this.SendPropertyChanging();
					this._LayerId = value;
					this.SendPropertyChanged("LayerId");
					this.OnLayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentHandle", DbType="Int NOT NULL")]
		public int ParentHandle
		{
			get
			{
				return this._ParentHandle;
			}
			set
			{
				if ((this._ParentHandle != value))
				{
					this.OnParentHandleChanging(value);
					this.SendPropertyChanging();
					this._ParentHandle = value;
					this.SendPropertyChanged("ParentHandle");
					this.OnParentHandleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementHandle", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ElementHandle
		{
			get
			{
				return this._ElementHandle;
			}
			set
			{
				if ((this._ElementHandle != value))
				{
					this.OnElementHandleChanging(value);
					this.SendPropertyChanging();
					this._ElementHandle = value;
					this.SendPropertyChanged("ElementHandle");
					this.OnElementHandleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
